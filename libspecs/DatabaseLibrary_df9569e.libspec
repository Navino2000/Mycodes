<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="DatabaseLibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2023-08-29T08:50:15Z" specversion="3" source="C:\python\Lib\site-packages\DatabaseLibrary\__init__.py" lineno="24">
<version />
<doc>The Database Library for [https://robotframework.org|Robot Framework] allows you to query a database and verify the results.
It requires an appropriate *Python module to be installed separately* - depending on your database, like e.g. `oracledb` or `pymysql`. 

== Requirements ==
- Python
- Robot Framework
- Python database module you're going to use - e.g. `oracledb`

== Installation ==
| pip install robotframework-databaselibrary
Don't forget to install the required Python database module!

== Usage example ==

| *** Settings ***
| Library       DatabaseLibrary
| Test Setup    Connect To My Oracle DB
| 
| *** Keywords ***
| Connect To My Oracle DB
|     Connect To Database
|     ...    oracledb
|     ...    dbName=db
|     ...    dbUsername=my_user
|     ...    dbPassword=my_pass
|     ...    dbHost=127.0.0.1
|     ...    dbPort=1521
| 
| *** Test Cases ***
| Person Table Contains Expected Records
|     ${output}=    Query    select LAST_NAME from person
|     Length Should Be    ${output}    2
|     Should Be Equal    ${output}[0][0]    See
|     Should Be Equal    ${output}[1][0]    Schneider
| 
| Person Table Contains No Joe
|     ${sql}=    Catenate    SELECT id FROM person
|     ...                    WHERE FIRST_NAME= 'Joe'    
|     Check If Not Exists In Database    ${sql}
| 

== Database modules compatibility ==
The library is basically compatible with any [https://peps.python.org/pep-0249|Python Database API Specification 2.0] module.

However, the actual implementation in existing Python modules is sometimes quite different, which requires custom handling in the library.
Therefore there are some modules, which are "natively" supported in the library - and others, which may work and may not.

See more on the [https://github.com/MarketSquare/Robotframework-Database-Library|project page on GitHub].</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Call Stored Procedure" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="350">
<arguments repr="spName, spParams=None, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="spName">
<name>spName</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="spParams=None">
<name>spParams</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Calls a stored procedure `spName` with the `spParams` - a *list* of parameters the procedure requires.
Use the special *CURSOR* value for OUT params, which should receive result sets -
they will be converted to appropriate DB variables before calling the procedure.
This is necessary only for some databases (e.g. Oracle or PostgreSQL).

The keywords always *returns two lists*:
- *Param values* - the copy of procedure parameters (modified, if the procedure changes the OUT params).
The list is empty, if procedures receives no params.
- *Result sets* - the list of lists, each of them containing results of some query, if the procedure
returns them or put them in the OUT params of type *CURSOR* (like in Oracle or PostgreSQL).

It also depends on the database, how the procedure returns the values - as params or as result sets.
E.g. calling a procedure in *PostgreSQL* returns even a single value of an OUT param as a result set.

Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.

Simple example:
| @{Params} = | Create List | Jerry | out_second_name |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_second_name | ${Params} |
| # ${Param values} = ['Jerry', 'Schneider'] |
| # ${result sets} = [] |

Example with a single CURSOR parameter (Oracle DB):
| @{Params} = | Create List | CURSOR |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_all_second_names | ${Params} |
| # ${Param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;] |
| # ${result sets} = [[('See',), ('Schneider',)]] |

Example with multiple CURSOR parameters (Oracle DB):
| @{Params} = | Create List | CURSOR | CURSOR |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_all_first_and_second_names | ${Params} |
| # ${Param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;, &lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;] |
| # ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]] |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| @{Param values}    @{Result sets} = | Call Stored Procedure | DBName.SchemaName.StoredProcName | ${Params} | True |</doc>
<shortdoc>Calls a stored procedure `spName` with the `spParams` - a *list* of parameters the procedure requires. Use the special *CURSOR* value for OUT params, which should receive result sets - they will be converted to appropriate DB variables before calling the procedure. This is necessary only for some databases (e.g. Oracle or PostgreSQL).</shortdoc>
</kw>
<kw name="Check If Exists In Database" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="23">
<arguments repr="selectStatement, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you have the following assertions in your robot
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' |

Then you will get the following:
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | # PASS |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' | True |

Using optional `msg` to override the default error message:
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' | msg=my error message |</doc>
<shortdoc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.</shortdoc>
</kw>
<kw name="Check If Not Exists In Database" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="52">
<arguments repr="selectStatement, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>This is the negation of `check_if_exists_in_database`.

Check if no rows would be returned by given the input `selectStatement`. If there are any results, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you have the following assertions in your robot
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'John' |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' |

Then you will get the following:
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'John' | # PASS |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'John' | True |

Using optional `msg` to override the default error message:
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | msg=my error message |</doc>
<shortdoc>This is the negation of `check_if_exists_in_database`.</shortdoc>
</kw>
<kw name="Connect To Database" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="38">
<arguments repr="dbapiModuleName=None, dbName=None, dbUsername=None, dbPassword=None, dbHost=None, dbPort=None, dbCharset=None, dbDriver=None, dbConfigFile=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbapiModuleName=None">
<name>dbapiModuleName</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbName=None">
<name>dbName</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbUsername=None">
<name>dbUsername</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbPassword=None">
<name>dbPassword</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbHost=None">
<name>dbHost</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbPort=None">
<name>dbPort</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbCharset=None">
<name>dbCharset</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbDriver=None">
<name>dbDriver</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbConfigFile=None">
<name>dbConfigFile</name>
<default>None</default>
</arg>
</arguments>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.

Optionally, you can specify a `dbConfigFile` wherein it will load the
default property values for `dbapiModuleName`, `dbName` `dbUsername`
and `dbPassword` (note: specifying `dbapiModuleName`, `dbName`
`dbUsername` or `dbPassword` directly will override the properties of
the same key in `dbConfigFile`). If no `dbConfigFile` is specified, it
defaults to `./resources/db.cfg`.

The `dbConfigFile` is useful if you don't want to check into your SCM
your database credentials.

Example db.cfg file
| [default]
| dbapiModuleName=pymysqlforexample
| dbName=yourdbname
| dbUsername=yourusername
| dbPassword=yourpassword
| dbHost=yourhost
| dbPort=yourport

Example usage:
| # explicitly specifies all db property values |
| Connect To Database | psycopg2 | my_db | postgres | s3cr3t | tiger.foobar.com | 5432 |

| # loads all property values from default.cfg |
| Connect To Database | dbConfigFile=default.cfg |

| # loads all property values from ./resources/db.cfg |
| Connect To Database |

| # uses explicit `dbapiModuleName` and `dbName` but uses the `dbUsername` and `dbPassword` in 'default.cfg' |
| Connect To Database | psycopg2 | my_db_test | dbConfigFile=default.cfg |

| # uses explicit `dbapiModuleName` and `dbName` but uses the `dbUsername` and `dbPassword` in './resources/db.cfg' |
| Connect To Database | psycopg2 | my_db_test |</doc>
<shortdoc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</shortdoc>
</kw>
<kw name="Connect To Database Using Custom Connection String" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="202">
<arguments repr="dbapiModuleName=None, db_connect_string=">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbapiModuleName=None">
<name>dbapiModuleName</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="db_connect_string=">
<name>db_connect_string</name>
<default />
</arg>
</arguments>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the `db_connect_string`
(parsed as single connection connection string or URI).

Use `connect_to_database_using_custom_params` for passing
connection params as named arguments.

Example usage:        
| Connect To Database Using Custom Connection String | psycopg2 | postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test |
| Connect To Database Using Custom Connection String | oracledb | username/pass@localhost:1521/orclpdb" |</doc>
<shortdoc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to connect to the database using the `db_connect_string` (parsed as single connection connection string or URI).</shortdoc>
</kw>
<kw name="Connect To Database Using Custom Params" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="170">
<arguments repr="dbapiModuleName=None, db_connect_string=">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dbapiModuleName=None">
<name>dbapiModuleName</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="db_connect_string=">
<name>db_connect_string</name>
<default />
</arg>
</arguments>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_connect_string`
(parsed as a list of named arguments).

Use `connect_to_database_using_custom_connection_string` for passing
all params in a single connection string or URI.

Example usage:        
| Connect To Database Using Custom Params | psycopg2 | database='my_db_test', user='postgres', password='s3cr3t', host='tiger.foobar.com', port=5432 |
| Connect To Database Using Custom Params | jaydebeapi | 'oracle.jdbc.driver.OracleDriver', 'my_db_test', 'system', 's3cr3t' |
| Connect To Database Using Custom Params | oracledb | user="username", password="pass", dsn="localhost/orclpdb" |
| Connect To Database Using Custom Params | sqlite3 | database="./my_database.db", isolation_level=None |</doc>
<shortdoc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to connect to the database using the map string `db_connect_string` (parsed as a list of named arguments).</shortdoc>
</kw>
<kw name="Delete All Rows From Table" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="162">
<arguments repr="tableName, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tableName">
<name>tableName</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.

For example, given we have a table `person` in a database

When you do the following:
| Delete All Rows From Table | person |

If all the rows can be successfully deleted, then you will get:
| Delete All Rows From Table | person | # PASS |
If the table doesn't exist or all the data can't be deleted, then you
will get:
| Delete All Rows From Table | first_name | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Delete All Rows From Table | person | True |</doc>
<shortdoc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Description" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="126">
<arguments repr="selectStatement, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Uses the input `selectStatement` to query a table in the db which will be used to determine the description. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you do the following:
| @{queryResults} | Description | SELECT * FROM person |
| Log Many | @{queryResults} |

You will get the following:
[Column(name='id', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]
[Column(name='first_name', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]
[Column(name='last_name', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| @{queryResults} | Description | SELECT * FROM person | True |</doc>
<shortdoc>Uses the input `selectStatement` to query a table in the db which will be used to determine the description. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Disconnect From Database" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="220">
<arguments repr="error_if_no_connection=False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_if_no_connection=False">
<name>error_if_no_connection</name>
<default>False</default>
</arg>
</arguments>
<doc>Disconnects from the database.
By default it's not an error if there was no open database connection -
suitable for usage as a teardown.
However you can enforce it using the `error_if_no_connection` parameter.

For example:
| Disconnect From Database | # disconnects from current connection to the database |</doc>
<shortdoc>Disconnects from the database. By default it's not an error if there was no open database connection - suitable for usage as a teardown. However you can enforce it using the `error_if_no_connection` parameter.</shortdoc>
</kw>
<kw name="Execute Sql Script" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="198">
<arguments repr="sqlScriptFileName, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="sqlScriptFileName">
<name>sqlScriptFileName</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.


Sample usage :
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-setup.sql |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DML-setup.sql |
| #interesting stuff here |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DML-teardown.sql |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-teardown.sql |

SQL commands are expected to be delimited by a semi-colon (';') - they will be executed separately.

For example:
DELETE FROM person_employee_table;
DELETE FROM person_table;
DELETE FROM employee_table;

Also, the last SQL command can optionally omit its trailing semi-colon.

For example:
DELETE FROM person_employee_table;
DELETE FROM person_table;
DELETE FROM employee_table

Given this, that means you can create spread your SQL commands in several
lines.

For example:
DELETE
  FROM person_employee_table;
DELETE
  FROM person_table;
DELETE
  FROM employee_table

However, lines that starts with a number sign (`#`) or a double dash ("--")
are treated as a commented line. Thus, none of the contents of that line will be executed.


For example:
# Delete the bridging table first...
DELETE
  FROM person_employee_table;
  # ...and then the bridged tables.
DELETE
  FROM person_table;
DELETE
  FROM employee_table

The slash signs ("/") are always ignored and have no impact on execution order.

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-setup.sql | True |</doc>
<shortdoc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known state before running your tests, or clearing out your test data after running each a test. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Execute Sql String" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="322">
<arguments repr="sqlString, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="sqlString">
<name>sqlString</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.

SQL commands are expected to be delimited by a semi-colon (';').

For example:
| Execute Sql String | DELETE FROM person_employee_table; DELETE FROM person_table |

For example with an argument:
| Execute Sql String | SELECT * FROM person WHERE first_name = ${FIRSTNAME} |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Execute Sql String | DELETE FROM person_employee_table; DELETE FROM person_table | True |</doc>
<shortdoc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Query" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="25">
<arguments repr="selectStatement, sansTran=False, returnAsDict=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="returnAsDict=False">
<name>returnAsDict</name>
<default>False</default>
</arg>
</arguments>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.

Tip: Unless you want to log all column values of the specified rows,
try specifying the column names in your select statements
as much as possible to prevent any unnecessary surprises with schema
changes and to easily see what your [] indexing is trying to retrieve
(i.e. instead of `"select * from my_table"`, try
`"select id, col_1, col_2 from my_table"`).

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you do the following:
| @{queryResults} | Query | SELECT * FROM person |
| Log Many | @{queryResults} |

You will get the following:
[1, 'Franz Allan', 'See']

Also, you can do something like this:
| ${queryResults} | Query | SELECT first_name, last_name FROM person |
| Log | ${queryResults[0][1]}, ${queryResults[0][0]} |

And get the following
See, Franz Allan

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| @{queryResults} | Query | SELECT * FROM person | True |</doc>
<shortdoc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. Set optional input `returnAsDict` to True to return values as a list of dictionaries.</shortdoc>
</kw>
<kw name="Row Count" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\query.py" lineno="83">
<arguments repr="selectStatement, sansTran=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
</arguments>
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |
|  2 | Jerry       | Schneider |

When you do the following:
| ${rowCount} | Row Count | SELECT * FROM person |
| Log | ${rowCount} |

You will get the following:
2

Also, you can do something like this:
| ${rowCount} | Row Count | SELECT * FROM person WHERE id = 2 |
| Log | ${rowCount} |

And get the following
1

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| ${rowCount} | Row Count | SELECT * FROM person | True |</doc>
<shortdoc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Row Count Is 0" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="84">
<arguments repr="selectStatement, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you have the following assertions in your robot
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'Franz Allan' |
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'John' |

Then you will get the following:
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'Franz Allan' | # FAIL |
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'John' | # PASS |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'John' | True |

Using optional `msg` to override the default error message:
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'Franz Allan' | msg=my error message |</doc>
<shortdoc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.</shortdoc>
</kw>
<kw name="Row Count Is Equal To X" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="113">
<arguments repr="selectStatement, numRows, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="numRows">
<name>numRows</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |
|  2 | Jerry       | Schneider |

When you have the following assertions in your robot
| Row Count Is Equal To X | SELECT id FROM person | 1 |
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = 'John' | 0 |

Then you will get the following:
| Row Count Is Equal To X | SELECT id FROM person | 1 | # FAIL |
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = 'John' | 0 | # PASS |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = 'John' | 0 | True |

Using optional `msg` to override the default error message:
| Row Count Is Equal To X | SELECT id FROM person | 1 | msg=my error message |</doc>
<shortdoc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.</shortdoc>
</kw>
<kw name="Row Count Is Greater Than X" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="144">
<arguments repr="selectStatement, numRows, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="numRows">
<name>numRows</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |
|  2 | Jerry       | Schneider |

When you have the following assertions in your robot
| Row Count Is Greater Than X | SELECT id FROM person | 1 |
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 |

Then you will get the following:
| Row Count Is Greater Than X | SELECT id FROM person | 1 | # PASS |
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Row Count Is Greater Than X | SELECT id FROM person | 1 | True |

Using optional `msg` to override the default error message:
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 | msg=my error message |</doc>
<shortdoc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.</shortdoc>
</kw>
<kw name="Row Count Is Less Than X" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="175">
<arguments repr="selectStatement, numRows, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="selectStatement">
<name>selectStatement</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="numRows">
<name>numRows</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |
|  2 | Jerry       | Schneider |

When you have the following assertions in your robot
| Row Count Is Less Than X | SELECT id FROM person | 3 |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 1 |

Then you will get the following:
| Row Count Is Less Than X | SELECT id FROM person | 3 | # PASS |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 1 | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Row Count Is Less Than X | SELECT id FROM person | 3 | True |

Using optional `msg` to override the default error message:
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 1 | msg=my error message |</doc>
<shortdoc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</shortdoc>
</kw>
<kw name="Set Auto Commit" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="240">
<arguments repr="autoCommit=True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="autoCommit=True">
<name>autoCommit</name>
<default>True</default>
</arg>
</arguments>
<doc>Turn the autocommit on the database connection ON or OFF. 

The default behaviour on a newly created database connection is to automatically start a 
transaction, which means that database actions that won't work if there is an active 
transaction will fail. Common examples of these actions are creating or deleting a database 
or database snapshot. By turning on auto commit on the database connection these actions 
can be performed.

Example:
| # Default behaviour, sets auto commit to true
| Set Auto Commit
| # Explicitly set the desired state
| Set Auto Commit | False</doc>
<shortdoc>Turn the autocommit on the database connection ON or OFF. </shortdoc>
</kw>
<kw name="Table Must Exist" source="..\..\..\..\..\python\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="206">
<arguments repr="tableName, sansTran=False, msg=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tableName">
<name>tableName</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sansTran=False">
<name>sansTran</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="msg=None">
<name>msg</name>
<default>None</default>
</arg>
</arguments>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.

For example, given we have a table `person` in a database

When you do the following:
| Table Must Exist | person |

Then you will get the following:
| Table Must Exist | person | # PASS |
| Table Must Exist | first_name | # FAIL |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| Table Must Exist | person | True |

Using optional `msg` to override the default error message:
| Table Must Exist | first_name | msg=my error message |</doc>
<shortdoc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an explicit transaction commit or rollback. The default error message can be overridden with the `msg` argument.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>